<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.semi.lynk.function.management.model.dao.ManagedMapper">

    <resultMap id="AccountList" type="com.semi.lynk.function.management.model.dto.AccountDTO">
        <id property="empID" column="employee_no"/>
        <result property="empName" column="employee_name"/>
        <result property="deptName" column="department_name"/>
        <result property="position" column="position"/>
        <result property="email" column="email"/>
        <result property="loginTime" column="login_time"/>
        <result property="memberStatus" column="member_status"/>
        <result property="empPwd" column="password"/>
        <result property="deptNo" column="department_no"/>
    </resultMap>

    <!-- 활성화 계정 카운트 -->
    <select id="getMemberStatusCounts" resultType="map">
        SELECT
         COUNT(CASE WHEN MEMBER_STATUS IN (1, 2) THEN 1 END) AS activeAcc,
         COUNT(CASE WHEN MEMBER_STATUS = 2 THEN 1 END) AS suspendedAcc
          FROM EMPLOYEE
    </select>

    <!-- 비활성화 계정 카운트 -->
    <select id="getMemberStatusCountsInac" resultType="map">
        SELECT
         COUNT(CASE WHEN MEMBER_STATUS IN (0, 3) THEN 1 END) AS inactiveAcc,
         COUNT(CASE WHEN MEMBER_STATUS = 3 THEN 1 END) AS removedAcc
          FROM EMPLOYEE
    </select>

    <!-- 활성화 계정 목록 출력 -->
    <select id="getActiveEmployee" resultMap="AccountList">
        SELECT a.EMPLOYEE_NO
             , a.EMPLOYEE_NAME
             , b.DEPARTMENT_NAME
             , c.POSITION
             , a.EMAIL
             , d.LOGIN_TIME
             , a.MEMBER_STATUS
          FROM EMPLOYEE a
          JOIN DEPARTMENT b ON a.DEPARTMENT_NO = b.DEPARTMENT_NO
          LEFT JOIN HUMAN_RESOURCE c ON a.EMPLOYEE_NO = c.EMPLOYEE_NO
          LEFT JOIN (SELECT EMPLOYEE_NO, LOGIN_TIME
                       FROM (SELECT EMPLOYEE_NO, LOGIN_TIME,
                                    ROW_NUMBER() OVER (PARTITION BY EMPLOYEE_NO ORDER BY LOGIN_TIME DESC) AS RN
                               FROM LOGIN_DATA) sub
                      WHERE RN = 1) d ON a.EMPLOYEE_NO = d.EMPLOYEE_NO
         WHERE a.MEMBER_STATUS IN (1, 2);

    </select>

    <!-- 활성화 계정 삭제 상태로 변경(삭제) -->
    <update id="deactivateAccounts" parameterType="map">
        UPDATE EMPLOYEE
           SET MEMBER_STATUS = 3
         WHERE EMPLOYEE_NO IN
        <foreach collection="empIDs" item="empID" open="(" separator="," close=")">
            #{empID}
        </foreach>
    </update>

    <!-- 삭제 계정 활성화 상태로 변경(복구) -->
    <update id="restoreAccounts" parameterType="map">
        UPDATE EMPLOYEE
           SET MEMBER_STATUS = 2
         WHERE EMPLOYEE_NO IN
        <foreach collection="empIDs" item="empID" open="(" separator="," close=")">
            #{empID}
        </foreach>
    </update>

    <!-- 비활성화 계정 목록 출력 -->
    <select id="getInactiveEmployee" resultMap="AccountList">
        SELECT a.EMPLOYEE_NO
             , a.EMPLOYEE_NAME
             , b.DEPARTMENT_NAME
             , c.POSITION
             , a.EMAIL
             , d.LOGIN_TIME
             , a.MEMBER_STATUS
          FROM EMPLOYEE a
          JOIN DEPARTMENT b ON a.DEPARTMENT_NO = b.DEPARTMENT_NO
          LEFT JOIN HUMAN_RESOURCE c ON a.EMPLOYEE_NO = c.EMPLOYEE_NO
          LEFT JOIN LOGIN_DATA d ON a.EMPLOYEE_NO = d.EMPLOYEE_NO
         WHERE MEMBER_STATUS IN (0, 3);
    </select>

    <!-- 사원 정보 수정 -->
<!--    <select id="getAccountByEmpID" parameterType="String" resultType="com.semi.lynk.function.management.model.dto.AccountDTO">-->
    <select id="getAccountByEmpID" parameterType="String" resultMap="AccountList">
        SELECT EMPLOYEE_NO
             , EMPLOYEE_NAME
             , DEPARTMENT_NO
             , PASSWORD
             , EMAIL
             , IMAGE
          FROM EMPLOYEE
         WHERE EMPLOYEE_NO = #{empID}
    </select>

    <!--  -->

</mapper>